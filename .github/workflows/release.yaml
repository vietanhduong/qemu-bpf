name: Release

on: push

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    outputs:
      kernel_versions: ${{ steps.kernel_versions.outputs.value }}
      target_arches: ${{ steps.target_arches.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Target Kernel Versions
        id: kernel_versions
        run: |
          KERNEL_VERSIONS=($(curl -sSL https://raw.githubusercontent.com/vietanhduong/kernel-builder/master/KERNEL_VERSIONS))
          echo "value=$(printf '%s\n' "${KERNEL_VERSIONS[@]}" | jq -ncR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

      - name: Target Arches
        id: target_arches
        # Currently we just support for x86-64
        run: |
          ARCHES=(amd64)
          echo "value=$(printf '%s\n' "${ARCHES[@]}" | jq -ncR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

  build-sysroot:
    name: Build Sysroot
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        arch: ${{ fromJson(needs.prepare.outputs.target_arches) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Sysroot Arch ${{ matrix.arch }}
        env:
          INSTALL_GO: "true"
          INSTALL_BCC: "true"
          DOCKER_BASE_IMAGE: sysroot
          ARCH: ${{ matrix.arch }}
          DEBIAN_RELEASE: bookworm
        run: |
          BUILDS_DIR=$PWD/.builds
          mkdir -p $BUILDS_DIR

          docker build . -t $DOCKER_BASE_IMAGE && \
            docker run --rm -v $BUILDS_DIR:/builds -v ./build-sysroot.sh:/scripts/build-sysroot.sh \
              -e INSTALL_GO=${INSTALL_GO} \
              -e INSTALL_BCC=${INSTALL_BCC} \
              $DOCKER_BASE_IMAGE -a "$ARCH" -r "${DEBIAN_RELEASE}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/.builds/sysroot-${{matrix.arch}}.tar.gz

  build-disk:
    name: Build QEMU Disk
    runs-on: ubuntu-20.04
    needs:
      - prepare
      - build-sysroot
    strategy:
      matrix:
        arch: ${{ fromJson(needs.prepare.outputs.target_arches) }}
        kernel_version: ${{ fromJson(needs.prepare.outputs.kernel_versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install QEMU
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get update && sudo apt-get install -y qemu-system

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: Build disk with Kernel Version ${{ matrix.kernel_version }}
        shell: bash
        env:
          KERNEL_VERSION: ${{ matrix.kernel_version }}
          SYSROOT: "${{ github.workspace }}/artifact/sysroot-${{matrix.arch}}.tar.gz"
          DISK_SIZE: "4096M"
        run: ./build-disk.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/.builds/qemu-${{matrix.kernel_version}}.qcow2

  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [build-disk]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: Test
        run: ls -lah "${{ github.workspace }}/artifact"
